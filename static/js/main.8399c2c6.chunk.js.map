{"version":3,"sources":["components/config.ts","components/graph.tsx","components/form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["assetItems","name","label","liabilityItems","_","add","remove","asset","liability","fy","excessDebtError","Graph","data","assetBars","map","elem","index","color","Color","rgb","lighten","react_default","a","createElement","es6","stackId","key","dataKey","fill","string","stroke","reverse","liabilityBars","graphData","bs","date","cash","currentAssets","nonCurrentAssets","currentLiabilities","nonCurrentLiabilities","equity","height","strokeDasharray","BSData","arguments","length","undefined","Object","classCallCheck","this","saveQueryStringKey","BalanceSheetForm","props","_this","possibleConstructorReturn","getPrototypeOf","call","handleChangeBS","dateIndex","event","value","target","setState","prevState","handleBlur","saveQueryString","state","handleClickAdd","push","url","URL","window","location","href","searchParams","set","JSON","stringify","history","pushState","toString","generateTextField","val","index_es","id","concat","onChange","onBlur","error","helperText","loadedData","loadQueryString","title","filter","e","i","parse","get","_this2","fields","style","margin","padding","container","spacing","item","xs","variant","onClick","handleClickRemove","float","Fragment","graph","React","Component","App","className","components_form","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8399c2c6.chunk.js","sourcesContent":["export const assetItems = [\n  { name: 'cash', label: '現預金' },\n  { name: 'currentAssets', label: '流動資産' },\n  { name: 'nonCurrentAssets', label: '固定資産' }\n];\nexport const liabilityItems = [\n  { name: 'currentLiabilities', label: '流動負債' },\n  { name: 'nonCurrentLiabilities', label: '固定負債' },\n  { name: 'equity', label: '純資産' }\n];\nexport const _ = {\n  add: 'ふやす',\n  remove: '消す',\n  asset: '資産',\n  liability: '負債',\n  fy: '会計年度',\n  excessDebtError: '債務超過のグラフは正常に表示されません'\n};\n","import React from 'react';\nimport {BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer} from 'recharts';\nimport Color from 'color';\nimport { assetItems, liabilityItems } from './config';\n\nconst Graph = (data) => {\n  const assetBars = assetItems.map(function(elem, index) {\n    const color = Color.rgb(255, 64, 0).lighten(0.1 + index * 0.25);\n    return <Bar stackId=\"a\" key={elem.name} dataKey={elem.name} name={elem.label} fill={color.string()} stroke=\"#333\" label />;\n  }).reverse();\n  const liabilityBars = liabilityItems.map(function(elem, index) {\n    const color = Color.rgb(0, 164, 255).lighten(0.1 + index * 0.25);\n    return <Bar stackId=\"b\" key={elem.name} dataKey={elem.name} name={elem.label} fill={color.string()} stroke=\"#333\" label />;\n  }).reverse();\n\n  const graphData = data.data.bs.map((bs, index) => {\n    return {\n      name: bs.date,\n      cash: bs.cash,\n      currentAssets: bs.currentAssets,\n      nonCurrentAssets: bs.nonCurrentAssets,\n      currentLiabilities: bs.currentLiabilities,\n      nonCurrentLiabilities: bs.nonCurrentLiabilities,\n      equity: bs.equity\n    }\n  });\n\n  return (\n    <ResponsiveContainer height={320}>\n      <BarChart data={graphData}>\n        <CartesianGrid strokeDasharray=\"3 3\"/>\n        <XAxis dataKey=\"name\"/>\n        <YAxis/>\n        <Tooltip/>\n        <Legend />\n        {assetBars}\n        {liabilityBars}\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default Graph;\n","import React from 'react';\nimport { TextField, Grid, Card, Button } from '@material-ui/core';\nimport { assetItems, liabilityItems, _ } from './config';\nimport Graph from './graph';\n\nclass BSData {\n  // ASSETS\n  cash: number | null;\n  currentAssets: number | null;\n  nonCurrentAssets: number | null;\n  // LIABILITIES and EQUITY\n  currentLiabilities: number | null;\n  nonCurrentLiabilities: number | null;\n  equity: number | null;\n\n  constructor(public date: string = \"\") {\n  }\n}\ninterface BSItem {\n  dateIndex: number;\n  name: keyof BSData;\n  label: string;\n}\ntype Props = any;\ninterface State {\n  title: string;\n  bs: BSData[]\n};\n\nconst saveQueryStringKey = 'bs';\n\nclass BalanceSheetForm extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n    const loadedData = this.loadQueryString();\n    if (loadedData) {\n      this.state = loadedData;\n    } else {\n      this.state = { title: '', bs: [] };\n      this.state.bs.push((new BSData(\"FY2018\")));\n      this.state.bs.push((new BSData(\"FY2019\")));\n    }\n  }\n\n  handleChangeBS = (dateIndex: number, name: keyof BSData) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    this.setState((prevState) => {\n      prevState.bs[dateIndex][name] = value;\n      return prevState;\n    });\n  };\n\n  handleBlur = () => {\n    this.saveQueryString(this.state);\n  }\n\n  handleClickAdd = () => {\n    const bs = this.state.bs;\n    bs.push(new BSData);\n    this.setState({bs});\n  }\n  handleClickRemove(index: number) {\n    const bs = this.state.bs.filter((e,i) => { return i != index; });\n    this.setState({ bs });\n  }\n\n  saveQueryString = (state: State) => {\n    const url = new URL(window.location.href);\n    url.searchParams.set(saveQueryStringKey, JSON.stringify(state));\n    window.history.pushState(null, null, url.toString());\n  }\n\n  loadQueryString() {\n    try {\n      const url = new URL(window.location.href);\n      return JSON.parse(url.searchParams.get(saveQueryStringKey));\n    } catch (error) {\n      return null;\n    }\n  }\n\n  generateTextField = (elem: BSItem) => {\n    const val = this.state.bs[elem.dateIndex][elem.name] ? this.state.bs[elem.dateIndex][elem.name] : '';\n    return <TextField\n      id={`bs-${elem.dateIndex}-${elem.name}`}\n      key={`bs-${elem.dateIndex}-${elem.name}`}\n      label={`${elem.label}`}\n      value={val}\n      onChange={this.handleChangeBS(elem.dateIndex, elem.name)}\n      onBlur={this.handleBlur}\n      error={val < 0}\n      helperText={val < 0 && _.excessDebtError}\n    />\n  }\n\n  render() {\n    const fields = this.state.bs.map((bs, index) => {\n      return (\n        <Card key={`input-form-${index}`} style={{margin: \"1rem\", padding: \"0 1rem 1rem\"}}>\n          <h3>{this.generateTextField({ name: 'date', label: _.fy, dateIndex: index })}</h3>\n          <Grid container spacing={8}>\n            <Grid item xs={4}>\n              <h4>{_.asset}</h4>\n              {assetItems.map(function(elem) {\n                return this.generateTextField({ name: elem.name, label: elem.label, dateIndex: index });\n              }, this)}\n            </Grid>\n            <Grid item xs={4}>\n              <h4>{_.liability}</h4>\n              {liabilityItems.map(function(elem) {\n                return this.generateTextField({ name: elem.name, label: elem.label, dateIndex: index });\n              }, this)}\n            </Grid>\n          </Grid>\n          <Button variant=\"contained\" color=\"secondary\" onClick={() => this.handleClickRemove(index)} style={{float: \"right\"}}>\n            {_.remove}\n          </Button>\n        </Card>\n      );\n    }, this);\n\n    return (\n      <>\n        <Card style={{margin: \"1rem\", padding: \"0 1rem\"}}>\n          <h1>\n          <TextField\n            label=\"title\"\n            value={this.state.title}\n            onChange={(e) => { this.setState({title: e.target.value}); }}\n          />\n          </h1>\n          <Graph data={this.state} />\n        </Card>\n        <form>\n          <h2>Data</h2>\n          {fields}\n          <Card style={{margin: \"1rem\", padding: \"1rem\"}}>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickAdd} style={{float: \"right\"}}>\n              {_.add}\n            </Button>\n          </Card>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default BalanceSheetForm;\n","import React from 'react';\nimport BalanceSheetForm from './components/form';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <BalanceSheetForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}