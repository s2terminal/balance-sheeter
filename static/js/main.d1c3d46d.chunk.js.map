{"version":3,"sources":["components/config.ts","components/graph.tsx","components/form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["assetItems","name","label","liabilityItems","Graph","data","assetBars","map","elem","index","color","Color","rgb","lighten","react_default","a","createElement","es6","stackId","key","dataKey","fill","string","stroke","reverse","liabilityBars","graphData","cash","currentAssets","nonCurrentAssets","currentLiabilities","nonCurrentLiabilities","equity","width","height","margin","top","right","left","bottom","strokeDasharray","BalanceSheetForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","event","setState","defineProperty","target","value","handleBlur","saveQueryString","url","URL","window","location","href","searchParams","set","JSON","stringify","history","pushState","toString","generateTextField","val","TextField_default","id","concat","onChange","onBlur","loadedData","loadQueryString","parse","get","assetFields","liabilityFields","Fragment","graph","React","Component","App","className","components_form","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1c3d46d.chunk.js","sourcesContent":["export const assetItems = [\n  { name: 'cash', label: '現預金' },\n  { name: 'currentAssets', label: '流動資産' },\n  { name: 'nonCurrentAssets', label: '固定資産' }\n];\nexport const liabilityItems = [\n  { name: 'currentLiabilities', label: '流動負債' },\n  { name: 'nonCurrentLiabilities', label: '固定負債' },\n  { name: 'equity', label: '純資産' }\n];\n","import React from 'react';\nimport {BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\nimport Color from 'color';\nimport { assetItems, liabilityItems } from './config';\n\nconst Graph = (data) => {\n  const assetBars = assetItems.map(function(elem, index) {\n    const color = Color.rgb(255, 64, 0).lighten(0.1 + index * 0.25);\n    return <Bar stackId=\"a\" key={elem.name} dataKey={elem.name} name={elem.label} fill={color.string()} stroke=\"#333\" label />;\n  }).reverse();\n  const liabilityBars = liabilityItems.map(function(elem, index) {\n    const color = Color.rgb(0, 164, 255).lighten(0.1 + index * 0.25);\n    return <Bar stackId=\"b\" key={elem.name} dataKey={elem.name} name={elem.label} fill={color.string()} stroke=\"#333\" label />;\n  }).reverse();\n\n  const graphData = [\n    {\n      // name: 'FY2018',\n      cash: data.data.cash,\n      currentAssets: data.data.currentAssets,\n      nonCurrentAssets: data.data.nonCurrentAssets,\n      currentLiabilities: data.data.currentLiabilities,\n      nonCurrentLiabilities: data.data.nonCurrentLiabilities,\n      equity: data.data.equity\n    }\n  ];\n\n  return (\n    <BarChart width={600} height={300} data={graphData}\n        margin={{top: 20, right: 30, left: 20, bottom: 5}}>\n      <CartesianGrid strokeDasharray=\"3 3\"/>\n      <XAxis dataKey=\"name\"/>\n      <YAxis/>\n      <Tooltip/>\n      <Legend />\n      {assetBars}\n      {liabilityBars}\n    </BarChart>\n  )\n}\n\nexport default Graph;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { assetItems, liabilityItems } from './config';\nimport Graph from './graph';\n\ntype Props = any;\ntype State = any;\ninterface BSItem {\n  name: string;\n  label: string;\n}\n\nclass BalanceSheetForm extends React.Component<Props, State> {\n  state: State = {\n    // ASSETS\n    cash: null,\n    currentAssets: null,\n    nonCurrentAssets: null,\n    // LIABILITIES and EQUITY\n    currentLiabilities: null,\n    nonCurrentLiabilities: null,\n    equity: null,\n  };\n\n  constructor(props) {\n    super(props);\n    const loadedData = this.loadQueryString();\n    if (loadedData) { this.state = loadedData }\n  }\n\n  handleChange = (name: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ [name]: event.target.value } as Pick<State, keyof State>);\n  };\n  handleBlur = () => {\n    this.saveQueryString(this.state);\n  }\n\n  saveQueryString = (state: State) => {\n    const url = new URL(window.location.href);\n    url.searchParams.set(\"bs\", JSON.stringify(state));\n    window.history.pushState(null, null, url.toString());\n  }\n\n  loadQueryString() {\n    const url = new URL(window.location.href);\n    return JSON.parse(url.searchParams.get(\"bs\"));\n  }\n\n  generateTextField = (elem: BSItem) => {\n    const val = this.state[elem.name] ? this.state[elem.name] : '';\n    return <TextField\n      id={`bs-${elem.name}`}\n      key={`bs-${elem.name}`}\n      label={`${elem.label}`}\n      value={val}\n      onChange={this.handleChange(elem.name)}\n      onBlur={this.handleBlur}\n    />\n  }\n\n  render() {\n    const assetFields = assetItems.map(function(elem) {\n      return this.generateTextField(elem);\n    }, this);\n\n    const liabilityFields = liabilityItems.map(function(elem) {\n      return this.generateTextField(elem);\n    }, this);\n\n    return (\n      <>\n        <form>\n          {assetFields}\n          {liabilityFields}\n        </form>\n        <Graph data={this.state} />\n      </>\n    );\n  }\n}\n\nexport default BalanceSheetForm;\n","import React from 'react';\nimport BalanceSheetForm from './components/form';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <BalanceSheetForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}